{
  "hash": "395bf15b1922a3fa65d5ead284a263f2",
  "result": {
    "engine": "knitr",
    "markdown": "# The combined model\n\nHere we present the predictive performance of the 2- to 10-cfRNA models trained in the 28wkGA samples from the combined dataset from discovery and validation cohort – we called these models as “**combined models**” or preterm+term models because _discovery cohort_ is from the preterm delivery and the _validation cohort_ from the term delivery. \n\nThen, we compare their predictive performances to those from the 2- to 10-cfRNA models trained in the 28wkGA samples of discovery cohort – we call these models as **the original models (or preterm models)** as mentioned in the main text of the paper (see @fig-fig4). The 2- to 10-cfRNAs in the combined and the original models were chosen by **Elastic net** which was chosen as the best feature selection method from the 5-fold cross-validation, which is explained in @sec-5fold-cv and @fig-fig3 A. \n\nFirstly, we need to combine the 28wkGA dataset from both discovery and validation cohort. You may need to refer to @lst-data-setup.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to train the combined model via Elastic Net\"}\n# combine the 28wkGA from discovery (preterm) and validation (term) dataset\nx<-rbind(li.mat[[\"train\"]][[\"28wk\"]],li.mat[[\"test\"]][[\"28wk\"]])\nmat.tr<-x # NB, the training dataset is now the combined dataset\n\nli.num<-2:10 %>% as.list\nnames(li.num)=paste0(\"F\",2:10)\n\n# Featue selection via ElasticNet only \ndl.combined.models<-\n  lapply(li.num, function(my.num){\n    message(paste(\"Num:\",my.num,\"Method: ENET\"))\n    dt.enet<-get_enet_coef(x=x, \"combined\", my.num=my.num)\n    dt.enet[method==\"ENet2\"]\n  })\nsave(dl.combined.models, file=\"RData/dl.combined.models.core17.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to validate the combined model in Discovery cohort, Validation cohort, and Munchel\"}\n## Combined models validated on POPS and & Munchel\ndl.combined.result<-lapply(dl.combined.models, function(dt.model){\n  dt.final.model<-dt.model[order(feature)][,.(.N,features=paste(feature,collapse=\",\")),method][order(features)]\n  dt.final<-dt.final.model[,.(.N,methods=paste(method,collapse=',')),features]\n\n  #######################################################################\n  # get LPOCV/AUC from the preterm dataset (NB, 28wk-preterm: training) #\n  #######################################################################\n  dt.final.result<-lapply(dt.final$methods, function(my.methods){\n                        ############################################\n                        # fit the model using the training dataset #\n                        ############################################\n                        my.feature<-dt.final[methods==my.methods]$features %>% strsplit(\",\") %>% unlist\n                        df.mat.tr<-mat.tr[,c(my.feature,'y')] %>% as.data.frame  # training set\n                        my.model<-glm(y~. , data = df.mat.tr, family = \"binomial\")\n\n                        ## preterm+term (NB, 28wk: dataset where the model was built)\n                        dt.foo0<-lapply(c(\"12wk\",\"20wk\",\"28wk\"), function(my.GA){\n                          message(paste(\"preterm+term\",my.methods,my.GA,sep=\":\"))\n                          x<-rbind(li.mat[[\"train\"]][[my.GA]], li.mat[[\"test\"]][[my.GA]])\n                          my.fold<-paste0(my.GA,\"(preterm+term)\")\n                          cbind(`methods`=my.methods,\n                                get_cv_glm2(x=x,my.fold=my.fold,my.model=my.model,my.feature=my.feature)\n                          )\n                        }) %>% rbindlist\n\n                        ## preterm (NB, 28wk: dataset where the model was built)\n                        dt.foo1<-lapply(c(\"12wk\",\"20wk\",\"28wk\"), function(my.GA){\n                          message(paste(\"preterm\",my.methods,my.GA,sep=\":\"))\n                          x<-li.mat[[\"train\"]][[my.GA]]\n                          my.fold<-paste0(my.GA,\"(preterm)\")\n                          cbind(`methods`=my.methods,\n                                get_cv_glm2(x=x,my.fold=my.fold,my.model=my.model,my.feature=my.feature)\n                          )\n                        }) %>% rbindlist\n\n                        ## term (validation)\n                        dt.foo2<-lapply(c(\"12wk\",\"20wk\",\"28wk\",\"36wk\"), function(my.GA){\n                          message(paste(\"term\",my.methods,my.GA,sep=\":\"))\n                          x<-li.mat[[\"test\"]][[my.GA]]\n                          my.fold<-paste0(my.GA,\"(term)\")\n                          cbind(`methods`=my.methods,\n                                get_cv_glm2(x=x,my.fold=my.fold,my.model=my.model,my.feature=my.feature)\n                          )\n                        }) %>% rbindlist\n                        \n                        ## Munchel \n                        message(paste(\"Munchel\",my.methods,sep=\":\"))\n                        x<-li.mat[[\"munchel\"]]\n                        my.fold<-\"Munchel\"\n                        dt.foo3<-cbind(`methods`=my.methods,\n                                get_cv_glm2(x=x,my.fold=my.fold,my.model=my.model,my.feature=my.feature)\n                        )\n\n                        rbind(dt.foo0, dt.foo1,dt.foo2,dt.foo3)\n                    }) %>% rbindlist\n  dt.final.result<-dt.final.result[order(fold,-AUC_test)]\n  dt.final.result\n}) # end of dl.enet.models\nsave(dl.combined.result, file=\"RData/dl.combined.result.core17.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}